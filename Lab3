3 ЛАБОРАТОРНА РОБОТА №3
ІДЕНТИФІКАЦІЯ ОБ’ЄКТІВ НА ЗОБРАЖЕННІ

Мета:
Навчитися розробляти і реалізовувати алгоритми ідентифікації об'єктів графічних зображень.

3.1 Результати виконання роботи

Вариант № 2
Реалізувати програму, що відрізняэ об‘экти з одним отвором від
їнших об‘эктів та позначаэ їх сімволом «+» на зображенні.Тестове
зображення створити самостійно.

Класс StackOverflow27071351:
package laba3;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.swing.JFrame;
import javax.swing.JPanel;

public class StackOverflow27071351 {

	private static class ImagePanel extends JPanel {
		private BufferedImage image;
		private Mass m;

		// конструктор
		public ImagePanel(int width, int height, BufferedImage image, Mass m) {
			this.image = image;
			image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
			this.m = m;
			repaint();
		}

		// союытие вывода на JPanel
		public void paintComponent(Graphics g) {

			g.drawImage(image, 0, 0, getWidth(), getHeight(), this);
		}

		/*
		 * public void paintComponent(Graphics g) { super.paintComponent(g); for (int i
		 * = 0; i < image.getWidth(); i++) { for (int j = 0; j < image.getHeight(); j++)
		 * { image.setRGB(i, j, new Color(255, 0, 0, 127).getRGB()); } }
		 * g.drawImage(image, 0, 0, getWidth(), getHeight(), this); }
		 */

	}

	public static void main(String[] args) {
		JFrame frame = new JFrame();
		int width = 50;
		int height = 50;
		frame.setSize(width, height);

		Vuch v = new Vuch();
		Mass m = v.publ();

		BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
		image = Otmechaem(m, image);// Отмечаем фигуры крестом
		// image = Pokraska(m, image);//красим все объекты
		// image = PokraskaRavnuh(m, image);//красим равные объекты
		frame.getContentPane().setLayout(new BorderLayout());
		frame.getContentPane().add(new ImagePanel(width, height, image, m));

		frame.setVisible(true);
	}

	private static BufferedImage Otmechaem(Mass m, BufferedImage image) {
		boolean key = false;
		int labl = 0;
		int t = 0;
		int k = 0;
		
		
		for (int x = 0; x < m.image.getWidth(); x++) {
			for (int y = 0; y < m.image.getHeight(); y++) {

				if (m.array[x][y] == 0) {

					image.setRGB(x, y, Color.black.getRGB());
				}

			}
		}
		
		for (int i = 0; i < m.list.size(); i++) {
			labl = m.list.get(i);
			for (int x = 0; x < m.image.getWidth(); x++) {
				if (key == true) {
					key = false;
					break;
				}
				for (int y = 0; y < m.image.getHeight(); y++) {

					if (m.array[x][y] == labl) {
						System.out.print(labl);
						System.out.println("Прошло вверх");

						image.setRGB(x, y, Color.red.getRGB());
						k = y;
						t = x;
						// рисуем вверх
						image.setRGB(t, k - 1, Color.red.getRGB());
						image.setRGB(t, k - 2, Color.red.getRGB());
						image.setRGB(t, k - 3, Color.red.getRGB());
						k = y;
						t = x;
						System.out.println("Прошло влево");
						// рисуем влево
						image.setRGB(t - 1, k, Color.red.getRGB());
						image.setRGB(t - 2, k, Color.red.getRGB());
						image.setRGB(t - 3, k, Color.red.getRGB());
						k = y;
						t = x;
						System.out.println("Прошло вправо");
						// рисуем вправо
						image.setRGB(t + 1, k, Color.red.getRGB());
						image.setRGB(t + 2, k, Color.red.getRGB());
						image.setRGB(t + 3, k, Color.red.getRGB());
						k = y;
						t = x;
						System.out.println("Прошло вниз");
						// рисуем вниз
						image.setRGB(t, k + 1, Color.red.getRGB());
						image.setRGB(t, k + 2, Color.red.getRGB());
						image.setRGB(t, k + 3, Color.red.getRGB());

						key = true;
						break;

					}
				}
			}

			System.out.println();

		}

		return image;
	}

	private static BufferedImage PokraskaRavnuh(Mass m, BufferedImage image) {
		int c = 255 / m.sortedMap.size();
		// создать рандомный цвет
		// System.out.print(m.sortedMap.get(i)+" ");
		// System.out.print(m.sortedMap.get(i+1)+" ");
		// System.out.println("-------------");
		for (int i = 2; i < m.sortedMap.size() + 3; i++) {

			for (int j = 2; j < m.sortedMap.size() + 3; j++) {
				System.out.println(m.sortedMap.get(i) + "  " + m.sortedMap.get(j));
				System.out.println(m.sortedMap.get(i) == m.sortedMap.get(j));

				if (m.sortedMap.get(i) == m.sortedMap.get(j) && i != j) {
					System.out.println("Равныыыыы");
					for (int x = 0; x < m.image.getWidth(); x++) {
						for (int y = 0; y < m.image.getHeight(); y++) {
							if (m.array[x][y] == j) {
								System.out.print(j);
								image.setRGB(x, y, new Color(c, 10, 60, 255).getRGB());
							}
							if (m.array[x][y] == i) {
								System.out.print(i);
								image.setRGB(x, y, new Color(c, 10, 60, 255).getRGB());
							}

						}
					}
					c = c + 10;

				}
				System.out.println("Cледующее сравнение");
			}
			System.out.println();

			System.out.println(c);
			// System.out.println("YES");
		}
		return image;
	}

	public static BufferedImage Pokraska(Mass m, BufferedImage image) {
		int a = 255 / m.sortedMap.size();
		int b = 255 / m.sortedMap.size() + 20;
		System.out.println(a);
		for (int i = 2; i < m.sortedMap.size() + 3; i++) {

			for (int x = 0; x < m.image.getWidth(); x++) {
				for (int y = 0; y < m.image.getHeight(); y++) {
					if (m.array[x][y] == i) {
						System.out.print(i);
						image.setRGB(x, y, new Color(170, b, a, 255).getRGB());
					}
				}
			}
			// System.out.print(m.sortedMap.get(i)+" ");
			// System.out.print(m.sortedMap.get(i+1)+" ");
			// System.out.println("NO");
			System.out.println();

			a = a + 255 / m.sortedMap.size();
			if (a >= 255) {
				b = b + 255 / m.sortedMap.size();
			}
			System.out.println(a);
		}

		for (int x = 0; x < m.image.getWidth(); x++) {
			for (int y = 0; y < m.image.getHeight(); y++) {

				if (m.array[x][y] == 0) {

					image.setRGB(x, y, Color.black.getRGB());
				}

			}
		}

		return image;
	}


}
Класс Mass:
package laba3;

import java.awt.image.BufferedImage;
import java.util.List;
import java.util.Map;

public class Mass {
	public BufferedImage image;
	public int[][] array;
	Map<Integer, Integer> map;
	Map<Integer, Integer> sortedMap;
	public List<Integer> list;
	
}
Класс Vuch:

package laba3;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.imageio.ImageIO;

public class Vuch {
	public BufferedImage image;
	public int[][] array;
	public int labl = 2;
	public boolean key = false;
	public int Sum = 0;

	// рекурсия делает команду из матлаба BWLABLE
	public void rec(int h, int w, int y, int x) {

		// if(array[y][x] == 1) {
		// array[y][x] = labl;

		if (x + 1 < w && array[y][x + 1] == 1) { // по x вправо
			// x=x+1;
			Sum = Sum + 1;
			array[y][x + 1] = labl;
			rec(h, w, y, (x + 1));
		}
		if (x - 1 >= 0 && array[y][x - 1] == 1) { // по x влево
			// x=x-1;
			Sum = Sum + 1;
			array[y][x - 1] = labl;
			rec(h, w, y, (x - 1));
		}
		if (y - 1 >= 0 && array[y - 1][x] == 1) { // по y вверх
			// y=y-1;
			Sum = Sum + 1;
			array[y - 1][x] = labl;
			rec(h, w, (y - 1), x);
		}

		if (y + 1 < h && array[y + 1][x] == 1) { // по y вниз
			// y=y+1;
			Sum = Sum + 1;
			array[y + 1][x] = labl;
			rec(h, w, (y + 1), x);
		}

//					key= true;
		// }

	}

	// Сортирует массив
	public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> unsortMap) {

		List<Map.Entry<K, V>> list = new LinkedList<Map.Entry<K, V>>(unsortMap.entrySet());

		Collections.sort(list, new Comparator<Map.Entry<K, V>>() {
			public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {
				return (o1.getValue()).compareTo(o2.getValue());
			}
		});

		Map<K, V> result = new LinkedHashMap<K, V>();
		for (Map.Entry<K, V> entry : list) {
			result.put(entry.getKey(), entry.getValue());
		}

		return result;

	}

	// основной метод алгоритма
	public Mass publ() {
		try {
			image = ImageIO
					.read(new File("D:\\Dima Yniversitet\\4 kyrcc\\Розпізнаввння образів\\labs\\laba3\\text.png"));
		} catch (IOException e) {
			e.printStackTrace();
		}
		BufferedImage originalImage = (BufferedImage) image;

		System.out.println(originalImage.getWidth() + "x" + originalImage.getHeight());
		System.out.println();

		array = new int[originalImage.getWidth()][originalImage.getHeight()];
		int y = 0; // i
		int x = 0; // j
		int h = originalImage.getHeight();
		int w = originalImage.getWidth();
		// считывание картинки
		for (y = 0; y < array.length; y++) {

			for (x = 0; x < array[y].length; x++) {

				array[y][x] = originalImage.getRGB(y, x);
				if (array[y][x] == -16777216) {
					array[y][x] = 0;
				}
				if (array[y][x] == -1) {
					array[y][x] = 1;
				}
				System.out.print(array[y][x] + "\t");
			}
			System.out.println();

		}
		System.out.println();
		System.out.println();
		System.out.println("Новый массив");
		// разделили на объекты , вычисление площади , добавление в map

		Map<Integer, Integer> map = new HashMap<>();

		for (y = 0; y < array.length; y++) {
			for (x = 0; x < array[y].length; x++) {
				if (array[y][x] == 1) {
					Sum = 1;
					array[y][x] = labl;
					rec(h, w, y, x);
					map.put(labl, Sum);

					labl++;

//					}
				}
			}

		}

		// вывод массива
		for (y = 0; y < array.length; y++) {

			for (x = 0; x < array[y].length; x++) {

				System.out.print(array[y][x] + "\t");
			}
			System.out.println();

		}
		System.out.println(map.size()
				+ "--------------------------------------------------------------------------------------------------------");

		// алгоритм вычисления Ейлера
		labl = 2;
		int n = 8;
		int E = 0;
		int Q0 = 0;
		int Q1 = 0;
		int Q2 = 0;
		int Q3 = 0;
		int Q4 = 0;
		int Q5 = 0;
		List<Integer> list = new ArrayList<>();
		for (int i = 0; i < map.size(); i++) {
			E=0;Q0=0;Q1=0;Q2=0;Q3=0;Q4=0;Q5=0;
			
			for (y = 0; y < array.length; y++) {
				for (x = 0; x < array[y].length; x++) {
					if (x + 1 < w && y + 1 < h && array[y][x] == labl && array[y][x+1] == 0 && array[y+1][x] == 0 && array[y+1][x+1] == 0 ) {
						Q1++;
					}
					if (x + 1 < w && y + 1 < h && array[y][x] == 0 && array[y][x+1] == labl && array[y+1][x] == 0 && array[y+1][x+1] == 0 ) {
						Q1++;
					}
					if (x + 1 < w && y + 1 < h && array[y][x] == 0 && array[y][x+1] == 0 && array[y+1][x] == labl && array[y+1][x+1] == 0 ) {
						Q1++;
					}
					if (x + 1 < w && y + 1 < h && array[y][x] == 0 && array[y][x+1] == 0 && array[y+1][x] == 0 && array[y+1][x+1] == labl ) {
						Q1++;
					}
					if (x + 1 < w && y + 1 < h && array[y][x] == labl && array[y][x+1] == labl && array[y+1][x] == 0 && array[y+1][x+1] == labl ) {
						Q3++;
					}
					if (x + 1 < w && y + 1 < h && array[y][x] == 0 && array[y][x+1] == labl && array[y+1][x] == labl && array[y+1][x+1] == labl ) {
						Q3++;
					}
					if (x + 1 < w && y + 1 < h && array[y][x] == labl && array[y][x+1] == labl && array[y+1][x] == labl && array[y+1][x+1] == 0 ) {
						Q3++;
					}
					if (x + 1 < w && y + 1 < h && array[y][x] == labl && array[y][x+1] == 0 && array[y+1][x] == labl && array[y+1][x+1] == labl ) {
						Q3++;
					}
					if (x + 1 < w && y + 1 < h && array[y][x] == 0 && array[y][x+1] == labl && array[y+1][x] == labl && array[y+1][x+1] == 0 ) {
						Q5++;
					}
					if (x + 1 < w && y + 1 < h && array[y][x] == labl && array[y][x+1] == 0 && array[y+1][x] == 0 && array[y+1][x+1] == labl ) {
						Q5++;
					}
					
				}
			}
			System.out.println("Фигура №"+labl);
			System.out.println("Q1 = "+Q1);
			System.out.println("Q3 = "+Q3);
			System.out.println("Q5 = "+Q5);
			E=(n*Q1 -n*Q3 + 2*n*Q5)/4 ;
			System.out.println("Число Ейлера:"+E);
			// если две дырки , добавляем в лист
			if(E<0) {
				list.add(labl);
			}
			labl++;
		}	
		// Список объектов , которые имеют дырки
		System.out.println("Список объектов , котрые имеют дырки:");
		System.out.println(list);
		System.out.println("Количество фигур:");
		System.out.println(list.size());
		
		// неотсортированный map
		System.out.println("Неотсортированный массив");
		System.out.println(map);

		// отсортированый map по площадям
		Map<Integer, Integer> sortedMap = sortByValue(map);
		System.out.println("Новый");
		System.out.println(sortedMap);
		// переменная с цветом цвет

		image = originalImage;

		Mass m = new Mass();
		m.array = array;
		m.map = map;
		m.sortedMap = sortedMap;
		m.image = image;
		m.list = list;
		return m;

	}

}
   
Рисунок 2.1


3.2 Висновок

Навчилися розробляти і реалізовувати алгоритми ідентифікації об'єктів графічних зображень.
